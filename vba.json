{
	"VBA - Class skeleton": {
		"prefix": "VBA-Class-Skeleton",
		"body": [
			"Option Explicit",
			"",
			"' MEMBER VARIABLES",
			"Private p${1:Property1} As ${2|String,Integer,Double,Object|}",
			"'",
			"'",
			"' PROPERTIES",
			"Public Property Get ${1:Property}() As ${2}",
			"    ' Code for statements like: Debug.Print Class.${1:Property1}",
			"    ${3:Set }${1:Property1} = p${1:Property1}",
			"End Property",
			"",
			"Public Property Let ${1:Property1}(arg As ${2})",
			"    ' Code for statements like: Class.${1:Property1} = ...",
			"    ${3:Set }p${1:Property1} = arg",
			"End Property",
			"",
			"Public Property Set ${1:Property1}(arg As ${2})",
			"    ' Code for statements like: Set Class.${1:Property1} = ...",
			"    ${3:Set }${1:Property1} = arg",
			"End Property",
			"'",
			"'",
			"' CLASS EVENT METHODS",
			"Private Sub Class_Initialize()",
			"    ' pInfo = initvalue",
			"End Sub",
			"'",
			"'",
			"' CLASS METHODS",
			"Public Sub Add()",
			"",
			"End Sub",
			"",
			"",
			"Public Function Repr() As String",
			"    Repr = \"String representation of object\"",
			"End Function",
			"'",
			"'",
			"' STATIC METHODS",
			"Public Function FormatNumber(ByVal value as double, ByVal numberOfDigits as integer) As String",
			"    FormatNumber = Format(value, \"#0.\" & String(numberOfDigits, \"0\"))",
			"End Function"
		],
		"description": "A commented skeleton for a VBA Class module"
	},
	"VBA - Class property": {
			"prefix": "VBA-Class-Property",
			"body": [
				"Private p${1:Property1} As ${2|String,Integer,Double,Object|}",
				"",
				"",
				"' PROPERTIES",
				"Public Property Get ${1:Property}() As ${2}",
				"    ' Code for statements like: Debug.Print Class.${1:Property1}",
				"    ${3:Set }${1:Property1} = p${1:Property1}",
				"End Property",
				"",
				"Public Property Let ${1:Property1}(arg As ${2})",
				"    ' Code for statements like: Class.${1:Property1} = ...",
				"    ${3:Set }p${1:Property1} = arg",
				"End Property",
				"",
				"Public Property Set ${1:Property1}(arg As ${2})",
				"    ' Code for statements like: Set Class.${1:Property1} = ...",
				"    ${3:Set }${1:Property1} = arg",
				"End Property"
			],
			"description": "A commented skeleton for a VBA Class module"
	},
	"VBA - Function with description": {
			"prefix": "VBA-Function-Skeleton",
			"body": [
				"Public Function FunctionName(ByVal arg1 As Double, ByVal arg2 As Double) As Double",
				"'***************************************************************************",
				"'Purpose: Returns this given this and that",
				"'",
				"'Inputs:    arg1 = Description",
				"'           arg2 = Description",
				"'",
				"'Outputs:   A double",
				"'***************************************************************************",
				"    FunctionName = 4.5",
				"End Function"
			],
			"description": "A commented skeleton for a VBA Function"
	},
	"VBA - Description": {
				"prefix": "VBA-Description",
				"body": [
					"'***************************************************************************",
					"'Purpose: Returns this given this and that",
					"'",
					"'Inputs:    arg1 = Description",
					"'           arg2 = Description",
					"'",
					"'Outputs:   A double",
					"'***************************************************************************"
				],
				"description": "The docstring of a function"
	},
	"VBA - Class sections": {
				"prefix": "VBA-Class-Sections",
				"body": [
					"Option Explicit",
					"'",
					"' MEMBER VARIABLES",
					"",
					"'",
					"'",
					"' PROPERTIES",
					"",
					"'",
					"'",
					"' CLASS EVENT METHODS",
					"",
					"'",
					"'",
					"' CLASS METHODS",
					"",
					"'",
					"'",
					"' STATIC METHODS",
					""
				],
				"description": "A commented skeleton for a VBA Class module"
	},
	"VBA - Set of a subclass in a Main class": {
		"prefix": "VBA-Set-of-subclass-in-main-class",
		"body": [
			"// MAIN CLASS",
			"Option Explicit",
			"'",
			"' MEMBER VARIABLES",
			"Private p${1:SetName} As Collection",
			"'",
			"'",
			"' PROPERTIES",
			"Public Property Get ${1:SetName}(Optional Index As Integer = -1) As ${2:SubClassName}",
			"    ' If no index is given, pass private Collection object as argument",
			"    ' to SetContainer method",
			"    If Index = -1 Then",
			"        Dim dummy As New ${2:SubClassName}",
			"        dummy.SetContainer p${1:SetName}",
			"        Set ${1:SetName} = dummy",
			"    Else",
			"        Set ${1:SetName} = p${1:SetName}(Index)",
			"    End If",
			"End Property",
			"",
			"Public Property Let ${1:SetName}(Index As Integer, arg As ${2:SubClassName})",
			"    ' Copy whole collection",
			"    Dim NewColl As New Collection",
			"    Dim i As Integer",
			"    For i = 1 To p${1:SetName}.Count",
			"        If i = Index Then NewColl.Add arg Else NewColl.Add p${1:SetName}(i)",
			"    Next i",
			"    Set p${1:SetName} = NewColl",
			"End Property",
			"",
			"Public Property Set ${1:SetName}(Index As Integer, arg As ${2:SubClassName})",
			"    ${1:SetName}(Index) = arg",
			"End Property",
			"",
			"'",
			"'",
			"' CLASS EVENT METHODS",
			"Private Sub Class_Initialize()",
			"    Set p${1:SetName} = New Collection",
			"End Sub",
			"'",
			"'",
			"' CLASS METHODS",
			"",
			"'",
			"'",
			"' STATIC METHODS",
			"",
			"// SUB CLASS",
			"'***************************************************************************",
			"' Class name: ${2:SubClassName}",
			"' Class that hold a set contained in a Collection object (named 'pContainer')",
			"'",
			"'",
			"' Example of calls",
			"' Dim MainObj as New MainClass",
			"' MainObj.${1:SetName}.NewItem arg1, arg2, arg3",
			"' MainObj.${1:SetName}(1).PropertyX = 45",
			"'",
			"'",
			"'***************************************************************************",
			"Option Explicit",
			"'",
			"'",
			"' MEMBER VARIABLES",
			"Public ${4:Property1} As ${5:Integer}",
			"Public ${7:Property2} As ${8:Double}",
			"",
			"Private p${9:Property3} As ${10:Integer}",
			"",
			"Private pContainer As Collection",
			"Private insideCollection As Boolean",
			"'",
			"'",
			"' PROPERTIES",
			"Public Property Get ${9:Property3}() As ${10:Integer}",
			"    ${9:Property3} = p${9:Property3}",
			"End Property",
			"",
			"Public Property Let ${9:Property3}(arg As ${10:Integer})",
			"    p${9:Property3} = arg",
			"End Property",
			"'",
			"'",
			"' CLASS EVENT METHODS",
			"Private Sub Class_Initialize()",
			"    Set pContainer = New Collection",
			"    pContainer.Add Me",
			"    insideCollection = False",
			"End Sub",
			"",
			"Public Sub SetContainer(ByRef Container As Collection)",
			"    Set pContainer = Container",
			"    insideCollection = True",
			"End Sub",
			"'",
			"'",
			"' CLASS METHODS",
			"",
			"Public Sub Add(ByRef NewObject As ${2:SubClassName})",
			"' Action: Mirrors the Collection method 'Add' with an object of this class",
			"'         If object is NOT contained in a Collection, do nothing",
			"'",
			"    If insideCollection Then pContainer.Add NewObject",
			"End Sub",
			"",
			"Public Function Count() As Long",
			"' Action: Mirrors the Collection method 'Count' with an object of this class",
			"'         If object is NOT contained in a Collection, return 1",
			"'",
			"    If insideCollection Then Count = pContainer.Count Else Count = 1",
			"End Function",
			"",
			"Public Function Item(Index As Integer) As ${2:SubClassName}",
			"' Action: Mirrors the Collection method 'Item' with an object of this class",
			"'         If object is NOT contained in a Collection, return Me (index no meaning)",
			"'",
			"    If insideCollection Then Item = pContainer.Item(Index) Else Item = Me",
			"End Function",
			"",
			"Public Sub Remove(Index As Integer)",
			"' Action: Mirrors the Collection method 'Remove' with an object of this class",
			"'         If object is NOT contained in a Collection, do nothing",
			"'",
			"    If insideCollection Then pContainer.Remove Index",
			"End Sub",
			"",
			"",
			"Public Sub NewItem(ByVal ${4:Property1} As ${5:Integer}, ByVal ${7:Property2} As ${8:Double},  ByVal ${7:Property2} As ${10:Integer})",
			"' Action: Adds a new item in a constructor like fashion",
			"'",
			"'",
			"    If insideCollection Then",
			"        Dim NewObject As New ${2:SubClassName}",
			"        NewObject.${4:Property1} = ${4:Property1}",
            "        NewObject.${7:Property2} = ${7:Property2}",
            "        NewObject.${9:Property3} = ${9:Property3}",
			"        pContainer.Add NewObject",
			"    Else",
			"        Me.${4:Property1} = ${4:Property1}",
            "        Me.${7:Property2} = ${7:Property2}",
            "        Me.${9:Property3} = ${9:Property3}",
			"    End If",
			"End Sub",
			"",
			"",
			"Public Function Repr() As String",
			"' Action: Returns a string representation of the object",
			"'",
			"'",
			"    Dim i As Integer",
			"    Dim tmpStr As String",
			"    tmpStr = \"\"",
			"    For i = 1 To Me.Count",
			"        With pContainer(i)",
			"            tmpStr = tmpStr & \"ind=\" & CStr(i) & \"  ${4:Property1}=\" & .${4:Property1} & \", ${7:Property2}=\" & .${7:Property2} & \", ${9:Property3}=\" & .${9:Property3}",
			"            If i < Me.Count Then tmpStr = tmpStr & vbNewLine",
			"        End With",
			"    Next i",
			"    Repr = tmpStr",
			"End Function",
			"'",
			"'",
			"' STATIC METHODS",
			""

		],
		"description": "A commented skeleton for a VBA Class module"
},
}
